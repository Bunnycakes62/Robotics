#include <ros/ros.h>
#include <geometry_msgs/Twist.h>
#include <stdlib.h>// For rand() and RAND_MAX

int main(int argc, char **argv) {
    // Initialize ROS, create a node handle
    ros::init(argc, argv, "publish_vel");
    ros::NodeHandle nh;
    
    // Create a publisher object
    ros::Publisher pub = nh.advertise<geometry_msgs::Twist>(``turtle1/cmd_vel", 1000);
    
    // Seed the random number generator
    srand(time(0));
    
    // Loop at a 1Hz rate until the node is shut down.
    ros::Rate rate(1);
    while(ros::ok()) {
        // Create and fill in the message. the other four fields default to 0.
        geometry_msgs::Twist msg;
        msg.linear.x = double(rand())/double(RAND_MAX);
        msg.angular.z = 2*double(rand())/double(RAND_MAX) -1;
        
        // Publish the message.
        pub.publish(msg);
        
        // Send a message to rosout.
        ROS_INFO_STREAM(``Sending random velocity command:")
        << `` linear=" << msg.linear.x
        << `` angular=" << msg.angular.z);
        
        // Wait until it's time for another iteration.
        rate.sleep();
    }
}
